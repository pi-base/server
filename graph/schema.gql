type Space {
  uid: ID!
  name: String!
  references: [Citation!]!
  description: String!
  traits: [Trait!]!
}

type Property {
  uid: ID!
  name: String!
  references: [Citation!]!
  description: String!
}

type Trait {
  property: Property!
  value: Boolean!
  references: [Citation!]!
  description: String!
  deduced: Boolean!
}

type Theorem {
  uid: ID!
  if: String!
  then: String!
  references: [Citation!]!
  description: String!
}

type Citation {
  type: String!
  ref: String!
  name: String!
}

type Branch {
  name: String!
  access: String!
  sha: String!
}

type User {
  name: String!
  branches: [Branch!]!
}

type Viewer {
  spaces: [Space!]!
  properties: [Property!]!
  theorems: [Theorem!]!
  version: String!
}

type ResetBranchResponse {
  branch: String!
  sha: String!
}

type SubmitBranchResponse {
  branch: String!
  url: String!
}

type ThrowErrorResponse {
  message: String!
}

# Inputs

input CitationInput {
  type: String!
  ref: String!
  name: String!
}

input CreateSpaceInput {
  uid: String
  name: String!
  description: String!
  references: [CitationInput]!
}

input CreatePropertyInput {
  uid: String
  name: String!
  description: String!
  references: [CitationInput]!
}

input AssertTraitInput {
  spaceId: String!
  propertyId: String!
  value: Boolean!
  description: String!
  references: [CitationInput]!
}

input AssertTheoremInput {
  uid: String
  antecedent: String!
  consequent: String!
  description: String!
  references: [CitationInput]!
}

input ResetBranchInput {
  branch: String!
  to: String!
}

input SubmitBranchInput {
  branch: String!
}

input UpdateSpaceInput {
  uid: String!
  description: String!
  references: [CitationInput]!
}

input UpdatePropertyInput {
  uid: String! 
  description: String!
  references: [CitationInput]!
}

input UpdateTheoremInput {
  uid: String!
  description: String!
  references: [CitationInput]!
}

input UpdateTraitInput {
  spaceId: String!
  propertyId: String!
  description: String!
  references: [CitationInput]!
}

input PatchInput {
  branch: String!
  sha: String!
}

input ThrowErrorInput {
  message: String!
}

# Root types

type Query {
  me: User!
  viewer(version: String): Viewer!
}

type Mutation {
  createSpace(patch: PatchInput!, space: CreateSpaceInput!): Viewer!
  createProperty(patch: PatchInput!, property: CreatePropertyInput!): Viewer!
  updateSpace(patch: PatchInput!, space: UpdateSpaceInput!): Viewer!
  updateProperty(patch: PatchInput!, property: UpdatePropertyInput!): Viewer!
  updateTheorem(patch: PatchInput!, theorem: UpdateTheoremInput!): Viewer!
  updateTrait(patch: PatchInput!, trait: UpdateTraitInput!): Viewer!
  assertTrait(patch: PatchInput!, trait: AssertTraitInput!): Viewer!
  assertTheorem(patch: PatchInput!, theorem: AssertTheoremInput!): Viewer!
  resetBranch(input: ResetBranchInput!): ResetBranchResponse!
  submitBranch(input: SubmitBranchInput!): SubmitBranchResponse!
  throwError(input: ThrowErrorInput!): ThrowErrorResponse!
}

schema {
  query: Query
  mutation: Mutation
}