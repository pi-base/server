{-# LANGUAGE TemplateHaskell #-}
module Graph.Serialization
  ( writeSchema
  ) where

import Protolude
import Language.Haskell.TH (Q, Exp, runIO, stringE)
import qualified Data.Text as T

expand :: Text -> Text
expand = fst . T.foldl' emit ("", 0)
  where
    emit :: (Text, Int) -> Char -> (Text, Int)
    emit (s, d) '{' = (s <> " {\n" <> indent (d + 1), d + 1)
    emit (s, d) '}' = (s <> "\n" <> indent (d - 1) <> "}\n\n", d - 1)
    emit (s, d) '(' = (s <> "(\n" <> indent (d + 1), d + 1)
    emit (s, d) ')' = (s <> "\n" <> indent (d - 1) <> ")", d - 1)
    emit (s, d) ',' = (s <> "\n" <> indent d, d)
    emit (s, d) ':' = (s <> ": ", d)
    emit (s, d) c   = (s `T.snoc` c, d)

indent :: Int -> Text
indent n = T.replicate n "  "

-- TODO: Q (Either e Text)
writeSchema :: Either e Text -> Q Exp
writeSchema (Right schema) = do
  let expanded = expand schema
  runIO $ do
    writeFile "graph/schema.gql" $
      "# This file is automatically generated from src/Graph/Schema.hs\n" <>
      expanded
  stringE $ T.unpack expanded
writeSchema _ = stringE ""
